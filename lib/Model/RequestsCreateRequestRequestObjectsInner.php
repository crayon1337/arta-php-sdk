<?php
/**
 * RequestsCreateRequestRequestObjectsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Arta\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Arta Public API
 *
 * The Arta Public API provides quote generation, transport booking, and tracking capabilities. Additionally the API enables Arta partner organizations to configure email and webhook notifications for their accounts.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: hello@arta.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Arta\Client\Model;

use \ArrayAccess;
use \Arta\Client\ObjectSerializer;

/**
 * RequestsCreateRequestRequestObjectsInner Class Doc Comment
 *
 * @category Class
 * @package  Arta\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RequestsCreateRequestRequestObjectsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'requests_create_request_request_objects_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'internal_reference' => 'string',
        'current_packing' => 'string[]',
        'depth' => 'string',
        'details' => '\Arta\Client\Model\RequestsCreateRequestRequestObjectsInnerDetails',
        'height' => 'string',
        'images' => 'string[]',
        'public_reference' => 'string',
        'subtype' => 'string',
        'width' => 'string',
        'unit_of_measurement' => 'string',
        'weight' => 'string',
        'weight_unit' => 'string',
        'value' => 'string',
        'value_currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'internal_reference' => null,
        'current_packing' => null,
        'depth' => null,
        'details' => null,
        'height' => null,
        'images' => 'uri',
        'public_reference' => null,
        'subtype' => null,
        'width' => null,
        'unit_of_measurement' => null,
        'weight' => null,
        'weight_unit' => null,
        'value' => null,
        'value_currency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'internal_reference' => false,
		'current_packing' => false,
		'depth' => false,
		'details' => false,
		'height' => false,
		'images' => false,
		'public_reference' => false,
		'subtype' => false,
		'width' => false,
		'unit_of_measurement' => false,
		'weight' => false,
		'weight_unit' => false,
		'value' => false,
		'value_currency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_reference' => 'internal_reference',
        'current_packing' => 'current_packing',
        'depth' => 'depth',
        'details' => 'details',
        'height' => 'height',
        'images' => 'images',
        'public_reference' => 'public_reference',
        'subtype' => 'subtype',
        'width' => 'width',
        'unit_of_measurement' => 'unit_of_measurement',
        'weight' => 'weight',
        'weight_unit' => 'weight_unit',
        'value' => 'value',
        'value_currency' => 'value_currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_reference' => 'setInternalReference',
        'current_packing' => 'setCurrentPacking',
        'depth' => 'setDepth',
        'details' => 'setDetails',
        'height' => 'setHeight',
        'images' => 'setImages',
        'public_reference' => 'setPublicReference',
        'subtype' => 'setSubtype',
        'width' => 'setWidth',
        'unit_of_measurement' => 'setUnitOfMeasurement',
        'weight' => 'setWeight',
        'weight_unit' => 'setWeightUnit',
        'value' => 'setValue',
        'value_currency' => 'setValueCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_reference' => 'getInternalReference',
        'current_packing' => 'getCurrentPacking',
        'depth' => 'getDepth',
        'details' => 'getDetails',
        'height' => 'getHeight',
        'images' => 'getImages',
        'public_reference' => 'getPublicReference',
        'subtype' => 'getSubtype',
        'width' => 'getWidth',
        'unit_of_measurement' => 'getUnitOfMeasurement',
        'weight' => 'getWeight',
        'weight_unit' => 'getWeightUnit',
        'value' => 'getValue',
        'value_currency' => 'getValueCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNIT_OF_MEASUREMENT_IN = 'in';
    public const UNIT_OF_MEASUREMENT_CM = 'cm';
    public const WEIGHT_UNIT_LB = 'lb';
    public const WEIGHT_UNIT_KG = 'kg';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitOfMeasurementAllowableValues()
    {
        return [
            self::UNIT_OF_MEASUREMENT_IN,
            self::UNIT_OF_MEASUREMENT_CM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeightUnitAllowableValues()
    {
        return [
            self::WEIGHT_UNIT_LB,
            self::WEIGHT_UNIT_KG,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('internal_reference', $data ?? [], null);
        $this->setIfExists('current_packing', $data ?? [], null);
        $this->setIfExists('depth', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('public_reference', $data ?? [], null);
        $this->setIfExists('subtype', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('unit_of_measurement', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('value_currency', $data ?? [], 'USD');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['internal_reference']) && (mb_strlen($this->container['internal_reference']) > 255)) {
            $invalidProperties[] = "invalid value for 'internal_reference', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['depth'] === null) {
            $invalidProperties[] = "'depth' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        if (!is_null($this->container['public_reference']) && (mb_strlen($this->container['public_reference']) > 255)) {
            $invalidProperties[] = "invalid value for 'public_reference', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['subtype'] === null) {
            $invalidProperties[] = "'subtype' can't be null";
        }
        if (!preg_match("/^[0-9a-z_]{1,56}$/", $this->container['subtype'])) {
            $invalidProperties[] = "invalid value for 'subtype', must be conform to the pattern /^[0-9a-z_]{1,56}$/.";
        }

        if ($this->container['width'] === null) {
            $invalidProperties[] = "'width' can't be null";
        }
        if ($this->container['unit_of_measurement'] === null) {
            $invalidProperties[] = "'unit_of_measurement' can't be null";
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!is_null($this->container['unit_of_measurement']) && !in_array($this->container['unit_of_measurement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                $this->container['unit_of_measurement'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['weight_unit'] === null) {
            $invalidProperties[] = "'weight_unit' can't be null";
        }
        $allowedValues = $this->getWeightUnitAllowableValues();
        if (!is_null($this->container['weight_unit']) && !in_array($this->container['weight_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'weight_unit', must be one of '%s'",
                $this->container['weight_unit'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if (!preg_match("/^(0|([1-9]+[0-9]*))(\\.[0-9]{1,2})?$/", $this->container['value'])) {
            $invalidProperties[] = "invalid value for 'value', must be conform to the pattern /^(0|([1-9]+[0-9]*))(\\.[0-9]{1,2})?$/.";
        }

        if ($this->container['value_currency'] === null) {
            $invalidProperties[] = "'value_currency' can't be null";
        }
        if ((mb_strlen($this->container['value_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'value_currency', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['value_currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'value_currency', the character length must be bigger than or equal to 3.";
        }

        if (!preg_match("/^[A-Z]{3}$/", $this->container['value_currency'])) {
            $invalidProperties[] = "invalid value for 'value_currency', must be conform to the pattern /^[A-Z]{3}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_reference
     *
     * @return string|null
     */
    public function getInternalReference()
    {
        return $this->container['internal_reference'];
    }

    /**
     * Sets internal_reference
     *
     * @param string|null $internal_reference This field can be used to pass through any data that you may want returned unaltered for your own later usage
     *
     * @return self
     */
    public function setInternalReference($internal_reference)
    {
        if (is_null($internal_reference)) {
            throw new \InvalidArgumentException('non-nullable internal_reference cannot be null');
        }
        if ((mb_strlen($internal_reference) > 255)) {
            throw new \InvalidArgumentException('invalid length for $internal_reference when calling RequestsCreateRequestRequestObjectsInner., must be smaller than or equal to 255.');
        }

        $this->container['internal_reference'] = $internal_reference;

        return $this;
    }

    /**
     * Gets current_packing
     *
     * @return string[]|null
     */
    public function getCurrentPacking()
    {
        return $this->container['current_packing'];
    }

    /**
     * Sets current_packing
     *
     * @param string[]|null $current_packing A list of packing subtype IDs describing how the item is currently packed
     *
     * @return self
     */
    public function setCurrentPacking($current_packing)
    {
        if (is_null($current_packing)) {
            throw new \InvalidArgumentException('non-nullable current_packing cannot be null');
        }
        $this->container['current_packing'] = $current_packing;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return string
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param string $depth The depth of the object
     *
     * @return self
     */
    public function setDepth($depth)
    {
        if (is_null($depth)) {
            throw new \InvalidArgumentException('non-nullable depth cannot be null');
        }
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Arta\Client\Model\RequestsCreateRequestRequestObjectsInnerDetails|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Arta\Client\Model\RequestsCreateRequestRequestObjectsInnerDetails|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height The height of the object
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets images
     *
     * @return string[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param string[]|null $images A list image urls of the object
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets public_reference
     *
     * @return string|null
     */
    public function getPublicReference()
    {
        return $this->container['public_reference'];
    }

    /**
     * Sets public_reference
     *
     * @param string|null $public_reference A client defined name for the object. The value provided for public_reference may be presented in notification emails and on shipment detail pages
     *
     * @return self
     */
    public function setPublicReference($public_reference)
    {
        if (is_null($public_reference)) {
            throw new \InvalidArgumentException('non-nullable public_reference cannot be null');
        }
        if ((mb_strlen($public_reference) > 255)) {
            throw new \InvalidArgumentException('invalid length for $public_reference when calling RequestsCreateRequestRequestObjectsInner., must be smaller than or equal to 255.');
        }

        $this->container['public_reference'] = $public_reference;

        return $this;
    }

    /**
     * Gets subtype
     *
     * @return string
     */
    public function getSubtype()
    {
        return $this->container['subtype'];
    }

    /**
     * Sets subtype
     *
     * @param string $subtype The object subtype ID. Options are defined in the Object types metadata endpoint
     *
     * @return self
     */
    public function setSubtype($subtype)
    {
        if (is_null($subtype)) {
            throw new \InvalidArgumentException('non-nullable subtype cannot be null');
        }

        if ((!preg_match("/^[0-9a-z_]{1,56}$/", ObjectSerializer::toString($subtype)))) {
            throw new \InvalidArgumentException("invalid value for \$subtype when calling RequestsCreateRequestRequestObjectsInner., must conform to the pattern /^[0-9a-z_]{1,56}$/.");
        }

        $this->container['subtype'] = $subtype;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string $width The width of the object
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return string
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param string $unit_of_measurement unit_of_measurement
     *
     * @return self
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        if (is_null($unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measurement cannot be null');
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!in_array($unit_of_measurement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                    $unit_of_measurement,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string|null $weight The weight of the object
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string $weight_unit The unit of the object
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_unit cannot be null');
        }
        $allowedValues = $this->getWeightUnitAllowableValues();
        if (!in_array($weight_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'weight_unit', must be one of '%s'",
                    $weight_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]+[0-9]*))(\\.[0-9]{1,2})?$/", ObjectSerializer::toString($value)))) {
            throw new \InvalidArgumentException("invalid value for \$value when calling RequestsCreateRequestRequestObjectsInner., must conform to the pattern /^(0|([1-9]+[0-9]*))(\\.[0-9]{1,2})?$/.");
        }

        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets value_currency
     *
     * @return string
     */
    public function getValueCurrency()
    {
        return $this->container['value_currency'];
    }

    /**
     * Sets value_currency
     *
     * @param string $value_currency ISO 4217 three-letter alphabetic currency code. Options are defined in the Currencies metadata endpoint
     *
     * @return self
     */
    public function setValueCurrency($value_currency)
    {
        if (is_null($value_currency)) {
            throw new \InvalidArgumentException('non-nullable value_currency cannot be null');
        }
        if ((mb_strlen($value_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $value_currency when calling RequestsCreateRequestRequestObjectsInner., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($value_currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $value_currency when calling RequestsCreateRequestRequestObjectsInner., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^[A-Z]{3}$/", ObjectSerializer::toString($value_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$value_currency when calling RequestsCreateRequestRequestObjectsInner., must conform to the pattern /^[A-Z]{3}$/.");
        }

        $this->container['value_currency'] = $value_currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


