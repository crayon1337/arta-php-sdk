<?php
/**
 * RequestQuotesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Arta\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Arta Public API
 *
 * The Arta Public API provides quote generation, transport booking, and tracking capabilities. Additionally the API enables Arta partner organizations to configure email and webhook notifications for their accounts.
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: hello@arta.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Arta\Client\Model;

use \ArrayAccess;
use \Arta\Client\ObjectSerializer;

/**
 * RequestQuotesInner Class Doc Comment
 *
 * @category Class
 * @package  Arta\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RequestQuotesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'request_quotes_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'included_insurance_policy' => '\Arta\Client\Model\RequestQuotesInnerIncludedInsurancePolicy',
        'included_services' => '\Arta\Client\Model\RequestQuotesInnerIncludedServicesInner[]',
        'optional_services' => '\Arta\Client\Model\RequestQuotesInnerOptionalServicesInner[]',
        'quote_type' => 'string',
        'status' => 'string',
        'total' => 'string',
        'total_currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'included_insurance_policy' => null,
        'included_services' => null,
        'optional_services' => null,
        'quote_type' => null,
        'status' => null,
        'total' => null,
        'total_currency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'included_insurance_policy' => true,
		'included_services' => false,
		'optional_services' => false,
		'quote_type' => false,
		'status' => false,
		'total' => false,
		'total_currency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'included_insurance_policy' => 'included_insurance_policy',
        'included_services' => 'included_services',
        'optional_services' => 'optional_services',
        'quote_type' => 'quote_type',
        'status' => 'status',
        'total' => 'total',
        'total_currency' => 'total_currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'included_insurance_policy' => 'setIncludedInsurancePolicy',
        'included_services' => 'setIncludedServices',
        'optional_services' => 'setOptionalServices',
        'quote_type' => 'setQuoteType',
        'status' => 'setStatus',
        'total' => 'setTotal',
        'total_currency' => 'setTotalCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'included_insurance_policy' => 'getIncludedInsurancePolicy',
        'included_services' => 'getIncludedServices',
        'optional_services' => 'getOptionalServices',
        'quote_type' => 'getQuoteType',
        'status' => 'getStatus',
        'total' => 'getTotal',
        'total_currency' => 'getTotalCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('included_insurance_policy', $data ?? [], null);
        $this->setIfExists('included_services', $data ?? [], null);
        $this->setIfExists('optional_services', $data ?? [], null);
        $this->setIfExists('quote_type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('total_currency', $data ?? [], 'USD');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['total']) && !preg_match("/^(0|([1-9]+[0-9]*))(\\.[0-9]{1,2})?$/", $this->container['total'])) {
            $invalidProperties[] = "invalid value for 'total', must be conform to the pattern /^(0|([1-9]+[0-9]*))(\\.[0-9]{1,2})?$/.";
        }

        if (!is_null($this->container['total_currency']) && (mb_strlen($this->container['total_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'total_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['total_currency']) && (mb_strlen($this->container['total_currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'total_currency', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['total_currency']) && !preg_match("/^[A-Z]{3}$/", $this->container['total_currency'])) {
            $invalidProperties[] = "invalid value for 'total_currency', must be conform to the pattern /^[A-Z]{3}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets included_insurance_policy
     *
     * @return \Arta\Client\Model\RequestQuotesInnerIncludedInsurancePolicy|null
     */
    public function getIncludedInsurancePolicy()
    {
        return $this->container['included_insurance_policy'];
    }

    /**
     * Sets included_insurance_policy
     *
     * @param \Arta\Client\Model\RequestQuotesInnerIncludedInsurancePolicy|null $included_insurance_policy included_insurance_policy
     *
     * @return self
     */
    public function setIncludedInsurancePolicy($included_insurance_policy)
    {
        if (is_null($included_insurance_policy)) {
            array_push($this->openAPINullablesSetToNull, 'included_insurance_policy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('included_insurance_policy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['included_insurance_policy'] = $included_insurance_policy;

        return $this;
    }

    /**
     * Gets included_services
     *
     * @return \Arta\Client\Model\RequestQuotesInnerIncludedServicesInner[]|null
     */
    public function getIncludedServices()
    {
        return $this->container['included_services'];
    }

    /**
     * Sets included_services
     *
     * @param \Arta\Client\Model\RequestQuotesInnerIncludedServicesInner[]|null $included_services included_services
     *
     * @return self
     */
    public function setIncludedServices($included_services)
    {
        if (is_null($included_services)) {
            throw new \InvalidArgumentException('non-nullable included_services cannot be null');
        }
        $this->container['included_services'] = $included_services;

        return $this;
    }

    /**
     * Gets optional_services
     *
     * @return \Arta\Client\Model\RequestQuotesInnerOptionalServicesInner[]|null
     */
    public function getOptionalServices()
    {
        return $this->container['optional_services'];
    }

    /**
     * Sets optional_services
     *
     * @param \Arta\Client\Model\RequestQuotesInnerOptionalServicesInner[]|null $optional_services optional_services
     *
     * @return self
     */
    public function setOptionalServices($optional_services)
    {
        if (is_null($optional_services)) {
            throw new \InvalidArgumentException('non-nullable optional_services cannot be null');
        }
        $this->container['optional_services'] = $optional_services;

        return $this;
    }

    /**
     * Gets quote_type
     *
     * @return string|null
     */
    public function getQuoteType()
    {
        return $this->container['quote_type'];
    }

    /**
     * Sets quote_type
     *
     * @param string|null $quote_type quote_type
     *
     * @return self
     */
    public function setQuoteType($quote_type)
    {
        if (is_null($quote_type)) {
            throw new \InvalidArgumentException('non-nullable quote_type cannot be null');
        }
        $this->container['quote_type'] = $quote_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }

        if ((!preg_match("/^(0|([1-9]+[0-9]*))(\\.[0-9]{1,2})?$/", ObjectSerializer::toString($total)))) {
            throw new \InvalidArgumentException("invalid value for \$total when calling RequestQuotesInner., must conform to the pattern /^(0|([1-9]+[0-9]*))(\\.[0-9]{1,2})?$/.");
        }

        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets total_currency
     *
     * @return string|null
     */
    public function getTotalCurrency()
    {
        return $this->container['total_currency'];
    }

    /**
     * Sets total_currency
     *
     * @param string|null $total_currency ISO 4217 three-letter alphabetic currency code. Options are defined in the Currencies metadata endpoint
     *
     * @return self
     */
    public function setTotalCurrency($total_currency)
    {
        if (is_null($total_currency)) {
            throw new \InvalidArgumentException('non-nullable total_currency cannot be null');
        }
        if ((mb_strlen($total_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $total_currency when calling RequestQuotesInner., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($total_currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $total_currency when calling RequestQuotesInner., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^[A-Z]{3}$/", ObjectSerializer::toString($total_currency)))) {
            throw new \InvalidArgumentException("invalid value for \$total_currency when calling RequestQuotesInner., must conform to the pattern /^[A-Z]{3}$/.");
        }

        $this->container['total_currency'] = $total_currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


